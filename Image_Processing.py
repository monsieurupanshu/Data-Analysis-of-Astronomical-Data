# -*- coding: utf-8 -*-
"""Image Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bmBznFi_4P2CzDaCQPvQ9DXG-9h5CE60
"""

pip install astroquery

from astroquery.skyview import SkyView

# Denoising using Gaussian
from scipy.signal import convolve2d

import numpy as np

import matplotlib.pyplot as plt

kernel = np.ones((3,3))/9

kernel

gaussian_kernel = np.array([[1/16, 1/8, 1/16],
                            [1/8, 1/4, 1/8],
                             [1/16, 1/8, 1/16]])

hdu = SkyView.get_images("M31", "SDSSg")[0][0]

M31_header = hdu.header

M31_Pixels = hdu.data

type(M31_Pixels)

M31_Pixels.shape

convolved_image = convolve2d(M31_Pixels, kernel, mode='same')

gaussian_convolved_image = convolve2d(M31_Pixels, gaussian_kernel, mode='same')

def plot_pixels(pixel_array, title, color):
  plt.imshow(pixel_array, cmap='gray', origin='lower')
  plt.title(title, color=color, weight='bold')
  plt.axis('off')

plot_pixels(convolved_image, title='Normal Kernel Convolution', color='maroon')

plot_pixels(gaussian_convolved_image, title='Gaussian Kernel Convolution', color='maroon')

def compare_pixels(scaled_array, title):
  plt.subplot(1, 2, 1)
  plot_pixels(M31_Pixels, title='Original Image', color='black')
  plt.subplot(1, 2, 2)
  plot_pixels(scaled_array, title=title, color='royalblue')
  plt.tight_layout()
  plt.show()

def log_normalization(pixel_array):
  return np.log(pixel_array)

log_norm_array = log_normalization(M31_Pixels)
compare_pixels(log_norm_array, title='Log Normalized Image')

from astropy.visualization import ZScaleInterval

z = ZScaleInterval()

z1, z2 = z.get_limits(log_norm_array)

img = plt.imshow(log_norm_array, vmin=z1, vmax=z2, cmap='gray', origin='lower')
plt.show()

image_array = img.make_image(renderer=None, unsampled=True)[0]

import cv2

grayscale_zint_array = cv2.cvtColor(image_array, cv2.COLOR_BGRA2GRAY)

convolved_grayscale = convolve2d(grayscale_zint_array, gaussian_kernel, mode='same')

plot_pixels(convolved_grayscale, title='Gaussian Kernel on ZScaleInterval', color='maroon')

# Enhancing Linear Features
SPECTRAL_LIST = ["gray","jet","hot","prism","nipy_spectral"]

from skimage.filters import meijering, sato

meijering_output = meijering(convolved_grayscale)
sato_output = sato(convolved_grayscale)

for colormap in SPECTRAL_LIST:
  plt.imshow(meijering_output, cmap=colormap, origin='lower')
  plt.title(f'Meijering M31 + {colormap}')
  plt.axis('off')
  plt.show()

for colormap in SPECTRAL_LIST:
  plt.imshow(sato_output, cmap=colormap, origin='lower')
  plt.title(f'Sato M31 + {colormap}')
  plt.axis('off')
  plt.show()

# Feature Detection and Extraction
from skimage.feature import corner_foerstner

feature_output = corner_foerstner(convolved_grayscale)

feature_output[1]

for colormap in SPECTRAL_LIST:
  plt.subplot(1, 2, 1)
  plt.imshow(feature_output[0], cmap=colormap, origin='lower')
  plt.title(f'Error Image + {colormap}')
  plt.axis('off')

  plt.subplot(1, 2, 2)
  plt.imshow(feature_output[1], cmap=colormap, origin='lower')
  plt.title(f'Roundness of Error Image + {colormap}')
  plt.axis('off')

  plt.tight_layout()
  plt.show()

# Multiscale
from skimage.feature import multiscale_basic_features

featured_image = multiscale_basic_features(convolved_grayscale)

P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22,P23,P24 = cv2.split(featured_image)

Pixels = [P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22,P23,P24]

for i, feature in enumerate(Pixels):
  plt.imshow(feature, cmap='nipy_spectral', origin='lower')
  plt.title(f'Feature {i+1}')
  plt.axis('off')
  plt.show()