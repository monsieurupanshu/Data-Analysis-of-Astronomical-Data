# -*- coding: utf-8 -*-
"""FITs File-Pixel Scaling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ujh1-YzEx4uWEev6-HcpJP7oRIBhVjvP

[**SkyView Virtual Telescope**](https://skyview.gsfc.nasa.gov/current/cgi/query.pl)
"""

pip install astroquery

import matplotlib.pyplot as plt

from astroquery.skyview import SkyView

hdu = SkyView.get_images("M31","SDSSg")[0][0]

hdu

M31_header = hdu.header

M31_Pixels = hdu.data

type(M31_Pixels)

M31_Pixels.shape

plt.imshow(M31_Pixels, cmap='gray', origin='lower')

import astropy.units as u

hdu = SkyView.get_images("M31", "DSS2 Blue",
                         pixels=600,
                         radius=150*u.arcmin)[0][0]

M31_DSS2_Blue_Pixels = hdu.data

plt.imshow(M31_DSS2_Blue_Pixels, cmap='gray', origin='lower')

from astropy.io import fits

# Prepare FITS file

hdulist = fits.HDUList()

hdu1 = fits.PrimaryHDU()

hdu1.data = M31_Pixels

hdu1.header = M31_header

hdulist.append(hdu1)

hdulist.writeto('Dummy_FITS_file.fits')

My_fits = fits.open('/content/Dummy_FITS_file.fits')

My_fits

My_fits[0]

My_fits[0].header

My_fits[0].data

dummy_data_var = My_fits[0].data

dummy_data_var.shape

type(dummy_data_var)

import numpy as np

plt.imshow(M31_Pixels, cmap='gray', origin='lower')

M31_Pixels[151, 151]

print('Sumarray Statistics of M31 Pixels:-')
print(f'Minimum:- {np.min(M31_Pixels)}')
print(f'Maximum:- {np.max(M31_Pixels)}')
print(f'Average:- {np.mean(M31_Pixels)}')
print(f'Std:- {np.std(M31_Pixels)}')

plt.hist(M31_Pixels.flat, bins=300)
plt.show()

# Linear Scaling or Min Max Scaling
def plot_pixels(pixel_array, title, color):
  plt.imshow(pixel_array, cmap='gray', origin='lower')
  plt.title(title, color=color, weight='bold')
  plt.axis('off')

def compare_pixels(scaled_array, title):
  plt.subplot(1, 2, 1)
  plot_pixels(M31_Pixels, title='Original Image', color='black')
  plt.subplot(1, 2, 2)
  plot_pixels(scaled_array, title=title, color='royalblue')
  plt.tight_layout()
  plt.show()

def minmax_scaling(pixel_array):
  num = pixel_array - np.min(pixel_array)
  den = np.max(pixel_array) - np.min(pixel_array)
  return num/den

minmax_array = minmax_scaling(M31_Pixels)
compare_pixels(minmax_array, title='MinMax Scaled')

# Standardization or Z Scaling
def zscale(pixel_array):
  num = pixel_array - np.mean(pixel_array)
  den = np.std(pixel_array)
  return num/den

zscaled_array = zscale(M31_Pixels)
compare_pixels(zscaled_array, title='Z Scales Image')

# Log Normalization
def log_normalization(pixel_array):
  return np.log(pixel_array)

log_norm_array = log_normalization(M31_Pixels)
compare_pixels(log_norm_array, title='Log Normalized Image')

plt.hist(log_norm_array.flat, bins=300)
plt.show()

log_norm_array.shape

# Square Root
def sqrt_scaling(pixel_array):
  return np.sqrt(pixel_array)

sqrt_array = sqrt_scaling(M31_Pixels)
compare_pixels(sqrt_array, title='Square Root Scaling')

# Zscale Interval
from astropy.visualization import ZScaleInterval

z = ZScaleInterval()

z1, z2 = z.get_limits(log_norm_array)

print(f'Minimum = {z1}')
print(f'Maximum = {z2}')

img = plt.imshow(log_norm_array, vmin=z1, vmax=z2, cmap='gray', origin='lower')
plt.show()

image_array = img.make_image(renderer=None, unsampled=True)[0]

image_array.shape

# Channel Image to Grayscale
import cv2

gray_array = cv2.cvtColor(image_array, cv2.COLOR_BGRA2GRAY)

gray_array.shape

plot_pixels(gray_array, title='ZScaleInterval GrayScale', color='royalblue')

plt.hist(gray_array.flat, bins=300)
plt.show()